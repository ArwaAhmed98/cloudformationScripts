Parameters:
  myLaunchTemplateVersionNumber:
    Type: String
    Default: 1
    Description: the number of servers to be launched by default
  EnvironmentName:
    Type: String
    Description: the env name value
Outputs:
  ALBDNS:
    Value: !GetAtt WebAppLB.DNSName

# Template to start from here the ASG 
Resources:
  WebAppLaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          apt-get update -y
          apt-get install apache2 -y
          systemctl start apache2.service
          cd /var/www/html
          echo "it works! Udagram, Udacity” > index.html
     ImageId: ami-0ee23bfc74a881de5
     KeyName: VocareumKey2
     SecurityGroupIds:
       - !Ref WebAccessSecurityGroup # needed to be replaced every time of destroy and apply
     InstanceType: t3.small
      BlockDeviceMappings:
      - DeviceName: "/dev/sdk"
        Ebs:
          VolumeSize: '10'
   ############################################# secuirty group ###################################################
    WebAccessSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
        GroupDescription: Allow http to our test host
        VpcId:
          Ref: MainVPC
        SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 0
          ToPort: 65535
          CidrIp: 0.0.0.0/0
     ############################################# secuirty group ###################################################
################## START THE AUTO SCALING GROUP ############
WebAppGroup:
 Type: AWS::AutoScaling::AutoScalingGroup
 Properties:
   VPCZoneIdentifier:
   - Fn::ImportValue: 
       !Sub "${EnvironmentName}-PRIV-NETS"
   LaunchTemplate:
     LaunchTemplateId: !Ref myWebAppLaunchTemplate
     Version: !Ref myLaunchTemplateVersionNumber
   MinSize: '2'
   MaxSize: '4'
   TargetGroupARNs:
   - Ref: WebAppTargetGroup
### THE ASG  =>  =>  =>  Launch config/tempelate
### THE LB   =>  =>  =>  Target Group
############# start the load balancer section here ############
  WebAppTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 8
      HealthyThresholdCount: 2
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: 5
      VpcId: 
        Fn::ImportValue:
          Fn::Sub: "${EnvironmentName}-MainVPC"
########### LB ##########
  WebAppLB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Subnets:
      - Fn::ImportValue: !Sub "${EnvironmentName}-PUB1-SN"
      - Fn::ImportValue: !Sub "${EnvironmentName}-PUB2-SN"
      SecurityGroups:
      - Ref: LBSecGroup
  Listener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
      - Type: forward
        TargetGroupArn:
          Ref: WebAppTargetGroup
      LoadBalancerArn:
        Ref: WebAppLB
      Port: '80'
      Protocol: HTTP
####### LBSecGroup ########
LBSecGroup:
 Type: AWS::EC2::SecurityGroup
 Properties:
   GroupDescription: Allow http to load balancer
   VpcId:
     Fn::ImportValue:
       !Sub "${EnvironmentName}-VPCID"
   SecurityGroupIngress:
   - IpProtocol: tcp
     FromPort: 80
     ToPort: 80
     CidrIp: 0.0.0.0/0
   SecurityGroupEgress:
   - IpProtocol: tcp
     FromPort: 80
     ToPort: 80
     CidrIp: 0.0.0.0/0
 
#_____________________________________________________________
#_____________________________________________________________

# IAM Role to allow EC2 Session Manager to access our server
RoleForS3: 
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
              
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess
#_____________________________________________________________
#_____________________________________________________________       
PolicyForRole:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName: Rolefors3
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - 's3:Get*'
              - 's3:List*'
              - 's3-object-lambda:Get*'
              - 's3-object-lambda:List*'
            Resource: '*'
      Roles:
        - !Ref RoleForS3
#_____________________________________________________________
#_____________________________________________________________
# Instance Profile
ServerInstanceProfile: 
    Type: "AWS::IAM::InstanceProfile"
    Properties: 
      Roles: 
        - !Ref RoleForS3
#_____________________________________________________________
#_____________________________________________________________